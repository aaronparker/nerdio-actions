# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# This pipeline validates scripts as they are modified

trigger: none
    # branches:
    #     include: [ main ]
    # paths:
    #     include: [ "scripts/**.ps1" ]

pool:
  vmImage: windows-latest

jobs:
- job: Test
  displayName: Test

  steps:
  - powershell: |
      .\tests\Install-Modules.ps1
    name: Modules
    displayName: 'Install modules'
    workingDirectory: $(build.sourcesDirectory)
    errorActionPreference: continue

  - powershell: |
      Import-Module -Name "PSScriptAnalyzer" -Force -ErrorAction "Stop"
      $Results = Invoke-ScriptAnalyzer -Path "$(build.sourcesDirectory)\scripts" -Recurse -ReportSummary
      $Results | Select-Object -Property RuleName, Severity, ScriptName, Line | Format-Table -AutoSize
      $Results | ConvertTo-Csv | Out-File -FilePath "$(build.sourcesDirectory)\PSScriptAnalyzer.csv" -Encoding utf8
    name: PSScriptAnalyzer
    displayName: 'Test with PSScriptAnalyzer'
    workingDirectory: $(build.sourcesDirectory)
    errorActionPreference: continue

  - publish: "$(build.sourcesDirectory)\\PSScriptAnalyzer.csv"
    artifact: PSScriptAnalyzerResults
    displayName: 'Publish PSScriptAnalyzer test artifacts'

  - powershell: |
      $AzureRegionName = ${env:AZUREREGIONNAME}
      $SecureVars = ${env:SECUREVARS} | ConvertFrom-Json -ErrorAction "Stop"

      Import-Module -Name "Pester" -Force -ErrorAction "Stop"

      $CodeDirs = @("$(build.sourcesDirectory)\scripts\image",
        "$(build.sourcesDirectory)\scripts\tweaks",
        "$(build.sourcesDirectory)\scripts\uninstall")

      $Config = New-PesterConfiguration
      $Config.Run.Path = "$(build.sourcesDirectory)\tests\scripts"
      $Config.Run.PassThru = $true
      $Config.CodeCoverage.Enabled = $true
      $Config.CodeCoverage.Path = $CodeDirs
      $Config.CodeCoverage.OutputFormat = "JaCoCo"
      $Config.CodeCoverage.OutputPath = "$(build.sourcesDirectory)\CodeCoverage.xml"
      $Config.TestResult.Enabled = $true
      $Config.TestResult.OutputFormat = "NUnitXml"
      $Config.TestResult.OutputPath = "$(build.sourcesDirectory)\TestResults.xml"
      $Config.Output.Verbosity = "Detailed"
      Invoke-Pester -Configuration $Config
    name: Pester
    displayName: 'Test with Pester'
    workingDirectory: $(build.sourcesDirectory)
    errorActionPreference: continue
    continueOnError: true

  - publish: "$(build.sourcesDirectory)\\support\\InstalledApplications.csv"
    artifact: InstalledApplications
    displayName: 'Publish installed applications'
    continueOnError: true

  - publish: "$(build.sourcesDirectory)\\support\\logs\\"
    artifact: AppInstallLogs
    displayName: 'Publish application installer logs'
    continueOnError: true

  - publish: "$(build.sourcesDirectory)\\TestResults.xml"
    artifact: PesterTestResults
    displayName: 'Publish Pester test artifacts'
    continueOnError: true

  # Publish Pester results
  - task: PublishTestResults@2
    displayName: 'Publish Pester results'
    inputs:
      testResultsFormat: "NUnit"
      testResultsFiles: "$(build.sourcesDirectory)\\TestResults.xml"
      failTaskOnFailedTests: true
      testRunTitle: "Publish Pester results"

  # Publish code coverage results
  - task: PublishCodeCoverageResults@2
    displayName: 'Publish code coverage results'
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: "$(build.sourcesDirectory)\\CodeCoverage.xml"
      pathToSources: "$(build.sourcesDirectory)\\scripts"
      failIfCoverageEmpty: false
